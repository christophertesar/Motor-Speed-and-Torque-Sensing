
#define ALLOUTPINS 0xFF
#define RS BIT3
#define EN BIT0
#define DELAY1 4    // COMMAND DELAY
#define DELAY2 200  // CLEAR DELAY
#define DELAY3 1000 // CYCLES PER mS

void INIT_LCD(void);    // INITIALIZES THE LCD (SENDS ALL COMMAND INSTRUCTIONS NECESSARY TO GET THE LCD READY AND SETUP)
void CLEAR_LCD(void);   // CLEARS ANYTHING ON LCD
void OUTPUT_CHAR(char cArray);      // DISPLAYS A CHARACTER ON THE SCREEN
void OUTPUT_STR(const char *str);   // DISPLAYS A STRING ON THE SCREEN
void LCD_ENABLE(void); // SENDS A SINGLE NEGATIVE EDGE TRIGGER TO P1.0 "ENABLE"
void _delay_ms(int a); // DELAY FUNCTION THAT ACCEPTS TIME IN MILLI SECONDS
void SEND_DATA(unsigned char data); // SENDS DATA TO LCD



//_______________________________________________________FUNCTION DEFINITIONS_______________________________________________//



/* SENDS A SINGLE NEGATIVE EDGE TRIGGER TO P1.0 "ENABLE" */
void LCD_ENABLE(void)
    {
    P4OUT |= EN;  // ENABLE HIGH
    P4OUT &= ~EN; // ENABLE LOW
    } // END ENABLE FN




/* DELAY FUNCTION THAT ACCEPTS TIME IN MILLI SECONDS */
void _delay_ms(int a)
    {
    while(a != 0)
        {
        _delay_cycles(DELAY3);
        a--;
        } // END WHILE
    } // END DELAY FN

/* SENDS DATA TO LCD 4 bit mode*/
void SEND_DATA(unsigned char data)
    {
    P4OUT = ((data & 0xF0));    // HIGHER NIBBLE
    LCD_ENABLE();               // NEGATIVE EDGE TRIGGER
    P4OUT =((data & 0x0F) << 4);// HIGHER NIBBLE
    LCD_ENABLE();               // NEGATIVE EDGE TRIGGER
    _delay_ms(DELAY2);          // WAIT FOR LCD TO EXECUTE COMMAND
    }

// INITIALIZES THE LCD (SENDS ALL COMMAND INSTRUCTIONS NECESSARY TO GET THE LCD READY AND SETUP)
void INIT_LCD(void)
    {
    // SETUP TO RECIEVE FIRST COMMAND IN 8 BIT
    _delay_ms(1000);            // LCD CONTROLLER STARTUP TIME
    P4OUT = 0x00;               // SETS P1.3 "RS" LOW, WHICH MAKES THE LCD READY TO RECIEVE A "COMMAND" AND ALL OTHER PINS LOW
    _delay_ms(DELAY1);          // WAIT FOR LCD TO SET BITS
    // SETS UP LCD FOR 4 BIT MODE
    P4OUT = BIT5;               // ENABLES 4 BIT MODE (DL SET LOW)
    LCD_ENABLE();               // NEGATIVE EDGE TRIGGER
    _delay_ms(DELAY1);          // WAIT FOR LCD TO EXECUTE COMMAND
    // SETS UP LCD FOR 2 LINE MODE, 5X8 DOT MODE AND 4BIT MODE AGAIN (SINCE THESE INSTRUCTIONS ARE ALL SEND TOGETHER)
    SEND_DATA(0x28);
    // CLEAR UP THE SCREEN
    SEND_DATA(0x01);
    // ENTRY SETUP - ASSIGNGS CURSOR MOVING DIRECTION (P.6/9 DATA SHEET ITEM #3)
    //SEND_DATA(0x02);
    // DISPLAY SETUP - ASSIGNGS DISPLAY ON, CURSOR ON, CURSOR BLINK ON (P.6/9 DATA SHEET ITEM #4)
    SEND_DATA(0x0C);
    // CURSOR SETUP - ASSIGNGS SHIFT CURSOR DIRECTION SLIGHTLY DIFFERENT FROM ENTRY SETUP (P.6/9 DATA SHEET ITEM #5)
    SEND_DATA(0x14);
    } // END INITIALIZATION FN




// CLEARS ANYTHING ON LCD
void CLEAR_LCD(void)
    {
    // SENDS COMMAND TO CLEAR LCD
    P4OUT &= ~RS;               // SETS P1.3 "RS" LOW, WHICH MAKES THE LCD READY TO RECIEVE A "COMMAND"
    P4OUT = ((0x01 & 0xF0));    // HIGHER NIBBLE "0000" 0001
    LCD_ENABLE();               // NEGATIVE EDGE TRIGGER
    P4OUT =((0x01 & 0x0F) << 4);// LOWER NIBBLE   0000 "0001"
    LCD_ENABLE();               // NEGATIVE EDGE TRIGGER
    _delay_ms(DELAY2);          // WAIT FOR LCD TO EXECUTE COMMAND ;APPROX 1.6mS

    // SENDS COMMAND TO RETURN CURSOR TO BEGNINING
    P4OUT = ((0x02 & 0xF0));    // HIGHER NIBBLE "0000" 0010
    LCD_ENABLE();               // NEGATIVE EDGE TRIGGER
    P4OUT =((0x02 & 0x0F) << 4);// LOWER NIBBLE   0000 "0010"
    LCD_ENABLE();               // NEGATIVE EDGE TRIGGER
    _delay_ms(DELAY2);          // WAIT FOR LCD TO EXECUTE COMMAND ;APPROX 1.6mS
    }  // END CLEAR FN




// DISPLAYS A STRING ON THE SCREEN
void OUTPUT_STR(const char *str)
    {
     while(*str)                     // LOOP THAT CYCLES TILL THE END OF STRING.
         {
         P4OUT = ((*str & 0xF0));    // SENDS UPPER NIBBLE OF STRING
         P4OUT |= RS;                // SETS P1.3 "RS" HIGH, ENSURES LCD IS READY TO PROCESS A "WORD" NOT COMMAND
         LCD_ENABLE();               // NEGATIVE EDGE TRIGGER
         P4OUT =((*str & 0x0F) << 4);// SENDS LOWER NIBBLE OF STRING
         P4OUT |= RS;                // NIBBLE DATA COULD ACTUALLY SET P1.3 BACK HIGH (DEPENDING ON YOUR STRING) AND LCD WOULD THINK ITS A COMMAND
         LCD_ENABLE();               // NEGATIVE EDGE TRIGGER
         _delay_ms(DELAY1);          // WAIT FOR LCD TO PROCESS AND PRINT STRING
         str++;                      // INCREASE POINTER ADDRESS BY ONE SO WE CAN GET THE DATA OF THE NEXT LETTER
         } // END OF WHILE
    } // END OUTPUT STRING FN




// DISPLAYS A CHARACTER ON THE SCREEN
void OUTPUT_CHAR(char cArray)
    {
    P4OUT = ((cArray & 0xF0));      // SENDS UPPER NIBBLE OF CHARACTER
    P4OUT |= RS;                    // SETS P1.3 "RS" HIGH, ENSURES LCD IS READY TO PROCESS A "WORD" NOT COMMAND
    LCD_ENABLE();                   // NEGATIVE EDGE TRIGGER
    P4OUT =((cArray & 0x0F) << 4);  // SENDS LOWER NIBBLE OF CHARACTER
    P4OUT |= RS;                    // NIBBLE DATA COULD ACTUALLY SET P1.3 BACK HIGH (DEPENDING ON YOUR STRING) AND LCD WOULD THINK ITS A COMMAND
    LCD_ENABLE();                   // NEGATIVE EDGE TRIGGER
    _delay_ms(DELAY1);              // WAIT FOR LCD
    } // END OUTPUT CHARACTER FN

